; ModuleID = 'gauss_llvm.ll'
source_filename = "gauss_llvm.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind readnone uwtable
define dso_local i32 @_Z5solveiiiiiiiiiiiiiiiiiiii(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
.lr.ph.2:
  %20 = alloca [16 x i32], align 16
  %21 = alloca [4 x i32], align 16
  %22 = bitcast [4 x i32]* %21 to i8*
  %23 = bitcast [16 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %23) #4
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 0
  %u24 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 0
  store i32 %0, i32* %24, align 16, !tbaa !2
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 1
  store i32 %1, i32* %25, align 4, !tbaa !2
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 2
  store i32 %2, i32* %26, align 8, !tbaa !2
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 3
  store i32 %3, i32* %27, align 4, !tbaa !2
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 4
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 5
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 6
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 7
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 8
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 9
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 10
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 11
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 12
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 13
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 14
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 15
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 16, i1 false)
  %40 = sdiv i32 %4, %0
  store i32 %40, i32* %28, align 16, !tbaa !2
  %41 = mul nsw i32 %40, %1
  %42 = sub nsw i32 %5, %41
  store i32 %42, i32* %29, align 4, !tbaa !2
  %43 = mul nsw i32 %40, %2
  %44 = sub nsw i32 %6, %43
  store i32 %44, i32* %30, align 8, !tbaa !2
  %45 = mul nsw i32 %40, %3
  %46 = sub nsw i32 %7, %45
  store i32 %46, i32* %31, align 4, !tbaa !2
  %47 = mul nsw i32 %40, %16
  %48 = sub nsw i32 %17, %47
  %49 = sdiv i32 %8, %0
  store i32 %49, i32* %32, align 16, !tbaa !2
  %50 = mul nsw i32 %49, %1
  %51 = sub nsw i32 %9, %50
  %52 = mul nsw i32 %49, %2
  %53 = sub nsw i32 %10, %52
  %54 = mul nsw i32 %49, %3
  %55 = sub nsw i32 %11, %54
  %56 = mul nsw i32 %49, %16
  %57 = sub nsw i32 %18, %56
  %58 = sdiv i32 %12, %0
  store i32 %58, i32* %36, align 16, !tbaa !2
  %59 = mul nsw i32 %58, %1
  %60 = sub nsw i32 %13, %59
  %61 = mul nsw i32 %58, %2
  %62 = sub nsw i32 %14, %61
  %63 = mul nsw i32 %58, %3
  %64 = sub nsw i32 %15, %63
  %65 = mul nsw i32 %58, %16
  %66 = sub nsw i32 %19, %65
  %67 = sdiv i32 %51, %42
  store i32 %67, i32* %33, align 4, !tbaa !2
  %68 = mul nsw i32 %44, %67
  %69 = sub nsw i32 %53, %68
  store i32 %69, i32* %34, align 8, !tbaa !2
  %70 = mul nsw i32 %46, %67
  %71 = sub nsw i32 %55, %70
  store i32 %71, i32* %35, align 4, !tbaa !2
  %72 = mul nsw i32 %48, %67
  %73 = sub nsw i32 %57, %72
  %74 = sdiv i32 %60, %42
  store i32 %74, i32* %37, align 4, !tbaa !2
  %75 = mul nsw i32 %44, %74
  %76 = sub nsw i32 %62, %75
  %77 = mul nsw i32 %46, %74
  %78 = sub nsw i32 %64, %77
  %79 = mul nsw i32 %48, %74
  %80 = sub nsw i32 %66, %79
  %81 = sdiv i32 %76, %69
  store i32 %81, i32* %38, align 8, !tbaa !2
  %82 = mul nsw i32 %71, %81
  %83 = sub nsw i32 %78, %82
  store i32 %83, i32* %39, align 4, !tbaa !2
  %84 = mul nsw i32 %73, %81
  %85 = sub nsw i32 %80, %84
  %86 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  %87 = sdiv i32 %85, %83
  store i32 %87, i32* %86, align 4, !tbaa !2
  %88 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %89 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 11
  %90 = load i32, i32* %89, align 4, !tbaa !2
  %91 = mul nsw i32 %87, %90
  %92 = sub nsw i32 %73, %91
  %93 = sdiv i32 %92, %69
  store i32 %93, i32* %88, align 8, !tbaa !2
  %94 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  %u94 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %48, i32* %94, align 4, !tbaa !2
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 6
  %96 = load i32, i32* %95, align 8, !tbaa !2
  %97 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %98 = load i32, i32* %97, align 8, !tbaa !2
  %99 = mul nsw i32 %98, %96
  %100 = sub nsw i32 %48, %99
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 7
  %102 = load i32, i32* %101, align 4, !tbaa !2
  %103 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  %104 = load i32, i32* %103, align 4, !tbaa !2
  %105 = mul nsw i32 %104, %102
  %106 = sub nsw i32 %100, %105
  %107 = sdiv i32 %106, %42
  store i32 %107, i32* %u94, align 4, !tbaa !2
  %108 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %u108 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  store i32 %16, i32* %108, align 16, !tbaa !2
  %109 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 1
  %110 = load i32, i32* %109, align 4, !tbaa !2
  %111 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  %112 = load i32, i32* %111, align 4, !tbaa !2
  %113 = mul nsw i32 %112, %110
  %114 = sub nsw i32 %16, %113
  %115 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 2
  %116 = load i32, i32* %115, align 8, !tbaa !2
  %117 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %118 = load i32, i32* %117, align 8, !tbaa !2
  %119 = mul nsw i32 %118, %116
  %120 = sub nsw i32 %114, %119
  %121 = getelementptr inbounds [16 x i32], [16 x i32]* %20, i64 0, i64 3
  %122 = load i32, i32* %121, align 4, !tbaa !2
  %123 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  %124 = load i32, i32* %123, align 4, !tbaa !2
  %125 = mul nsw i32 %124, %122
  %126 = sub nsw i32 %120, %125
  store i32 %126, i32* %u108, align 16, !tbaa !2
  %127 = load i32, i32* %u24, align 16, !tbaa !2
  %128 = sdiv i32 %126, %127
  %129 = add nsw i32 %107, %128
  %130 = add nsw i32 %129, %93
  %131 = add nsw i32 %130, %87
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %23) #4
  ret i32 %131
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #2 {
  %1 = tail call i32 @_Z5solveiiiiiiiiiiiiiiiiiiii(i32 1, i32 2, i32 1, i32 -1, i32 3, i32 2, i32 4, i32 4, i32 4, i32 4, i32 3, i32 4, i32 2, i32 0, i32 1, i32 5, i32 5, i32 16, i32 22, i32 15)
  %2 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %1)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #3

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.1-8 (tags/RELEASE_701/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
